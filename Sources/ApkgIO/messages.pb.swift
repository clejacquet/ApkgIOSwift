// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MediaEntries: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [MediaEntries.MediaEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct MediaEntry: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var size: UInt32 = 0

    var sha1: Data = Data()

    var legacyZipFilename: UInt32 {
      get {return _legacyZipFilename ?? 0}
      set {_legacyZipFilename = newValue}
    }
    /// Returns true if `legacyZipFilename` has been explicitly set.
    var hasLegacyZipFilename: Bool {return self._legacyZipFilename != nil}
    /// Clears the value of `legacyZipFilename`. Subsequent reads from it will return its default value.
    mutating func clearLegacyZipFilename() {self._legacyZipFilename = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _legacyZipFilename: UInt32? = nil
  }

  init() {}
}

struct Config: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var qFormat: String = String()

  var aFormat: String = String()

  var qFormatBrowser: String = String()

  var aFormatBrowser: String = String()

  var targetDeckID: Int64 = 0

  var browserFontName: String = String()

  var browserFontSize: UInt32 = 0

  /// used for merging notetypes on import (Anki 23.10)
  var id: Int64 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var other: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MediaEntries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MediaEntries"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MediaEntries, rhs: MediaEntries) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MediaEntries.MediaEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = MediaEntries.protoMessageName + ".MediaEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "size"),
    3: .same(proto: "sha1"),
    255: .standard(proto: "legacy_zip_filename"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.size) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.sha1) }()
      case 255: try { try decoder.decodeSingularUInt32Field(value: &self._legacyZipFilename) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularUInt32Field(value: self.size, fieldNumber: 2)
    }
    if !self.sha1.isEmpty {
      try visitor.visitSingularBytesField(value: self.sha1, fieldNumber: 3)
    }
    try { if let v = self._legacyZipFilename {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 255)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MediaEntries.MediaEntry, rhs: MediaEntries.MediaEntry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.size != rhs.size {return false}
    if lhs.sha1 != rhs.sha1 {return false}
    if lhs._legacyZipFilename != rhs._legacyZipFilename {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Config"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "q_format"),
    2: .standard(proto: "a_format"),
    3: .standard(proto: "q_format_browser"),
    4: .standard(proto: "a_format_browser"),
    5: .standard(proto: "target_deck_id"),
    6: .standard(proto: "browser_font_name"),
    7: .standard(proto: "browser_font_size"),
    8: .same(proto: "id"),
    255: .same(proto: "other"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.qFormat) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.aFormat) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.qFormatBrowser) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.aFormatBrowser) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.targetDeckID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.browserFontName) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.browserFontSize) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self._id) }()
      case 255: try { try decoder.decodeSingularBytesField(value: &self.other) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.qFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.qFormat, fieldNumber: 1)
    }
    if !self.aFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.aFormat, fieldNumber: 2)
    }
    if !self.qFormatBrowser.isEmpty {
      try visitor.visitSingularStringField(value: self.qFormatBrowser, fieldNumber: 3)
    }
    if !self.aFormatBrowser.isEmpty {
      try visitor.visitSingularStringField(value: self.aFormatBrowser, fieldNumber: 4)
    }
    if self.targetDeckID != 0 {
      try visitor.visitSingularInt64Field(value: self.targetDeckID, fieldNumber: 5)
    }
    if !self.browserFontName.isEmpty {
      try visitor.visitSingularStringField(value: self.browserFontName, fieldNumber: 6)
    }
    if self.browserFontSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.browserFontSize, fieldNumber: 7)
    }
    try { if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
    } }()
    if !self.other.isEmpty {
      try visitor.visitSingularBytesField(value: self.other, fieldNumber: 255)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Config, rhs: Config) -> Bool {
    if lhs.qFormat != rhs.qFormat {return false}
    if lhs.aFormat != rhs.aFormat {return false}
    if lhs.qFormatBrowser != rhs.qFormatBrowser {return false}
    if lhs.aFormatBrowser != rhs.aFormatBrowser {return false}
    if lhs.targetDeckID != rhs.targetDeckID {return false}
    if lhs.browserFontName != rhs.browserFontName {return false}
    if lhs.browserFontSize != rhs.browserFontSize {return false}
    if lhs._id != rhs._id {return false}
    if lhs.other != rhs.other {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
